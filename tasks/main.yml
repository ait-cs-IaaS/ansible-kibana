# Gather rpm package facts
- name: Gather rpm package facts
  package_facts:
    manager: auto

- name: Unhold kibana version for install
  command: apt-mark unhold kibana
  changed_when: false

# Install Kibana 
- name: Install Kibana
  apt:
    name: kibana{% if elastic_stack_version is defined and elastic_stack_version|length>0 %}={{ elastic_stack_version }}{% endif %}
    update_cache: yes
  when: "'kibana' not in ansible_facts.packages"

- name: Hold kibana version
  command: apt-mark hold kibana
  when: elastic_stack_version_lock
  changed_when: false


- name: Ensure certs directory exits
  file:
    path: "{{ kibana_ssl_certs_path }}"
    state: directory
    mode: "02750"
    owner: root
    group: kibana
  when:
    - kibana_xpack_security_enabled|bool
    - kibana_server_ssl_enabled|bool

- name: Copy kibana HTTP ssl certificates
  copy:
    src: "{{ item }}"
    dest: "{{ kibana_ssl_certs_path }}/{{ item | basename }}"
    mode: "0660"
    owner: root
    group: kibana
  loop:
    - "{{ kibana_server_ssl_cert }}"
    - "{{ kibana_server_ssl_key }}"
    - "{{ kibana_server_ssl_ca }}"
  when:
    - kibana_xpack_security_enabled|bool
    - kibana_server_ssl_enabled|bool
    - kibana_ssl_copy_certs|bool
  notify: restart kibana

- name: Configure kibana
  become: yes
  template:
    src: "{{ kibana_config_tpl }}"
    dest: "{{ kibana_config_dest }}"
    mode: "0660"
    owner: root
    group: kibana
  notify: restart kibana

- name: Ensure local plugins directory exits
  file:
    path: "{{ kibana_local_plugins_dir }}"
    state: directory

- name: Copy local plugin files sources
  copy:
    src: "{{ item.src }}"
    dest: "{{ kibana_local_plugins_dir }}/{{ item.src | basename }}"
  loop: "{{ kibana_plugins | selectattr('src', 'defined') }}"

- name: Get list of installed kibana plugins
  become: yes
  become_user: kibana
  command: "{{ kibana_plugin_bin }} list"
  changed_when: no
  register: plugin_list

- name: Set installed plugins
  set_fact:
    kibana_installed_plugins: |
      {{ {} | combine(plugin_list.stdout_lines | map('regex_replace', '^(.*)@(.*)', '{"\1": "\2"}') | map('from_json')) }}

- name: Remove outdated kibana plugins
  become: yes
  become_user: kibana
  command: "{{ kibana_plugin_bin }} remove {{ item.name }}"
  loop: "{{ kibana_plugins }}"
  when: item.version is not defined or (item.name in kibana_installed_plugins.keys() and kibana_installed_plugins[item.name] != item.version)

- name: Install kibana plugins
  become: yes
  command: "{{ kibana_plugin_bin }} install {{ 'file://'+kibana_local_plugins_dir+'/'+(item.src | basename) if item.src is defined else item.url }}"
  loop: "{{ kibana_plugins }}"
  notify: restart kibana
  when: item.version is not defined or item.name not in kibana_installed_plugins.keys() or (item.name in kibana_installed_plugins.keys() and kibana_installed_plugins[item.name] != item.version)

- name: Ensure kibana plugins config directories exist
  become: yes
  file:
    dest: "{{ item.dest | dirname }}"
    owner: root
    group: kibana
    state: directory
  loop: "{{ kibana_plugins | selectattr('configs', 'defined') | map(attribute='configs') | flatten }}"

- name: Configure kibana plugins
  become: yes
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0660"
    owner: root
    group: kibana
  notify: restart kibana
  loop: "{{ kibana_plugins | selectattr('configs', 'defined') | map(attribute='configs') | flatten }}"

# Start Kibana
- name: Start Kibana
  service:
    name: kibana
    state: started
    enabled: true

# Until kibana is ready it will return 503 - Service unavailable
- name: Wait for kibana to become ready before adding dasboards
  uri:
    url: "{{ kibana_server_protocol }}://{{ kibana_server_ip }}:{{ kibana_server_port }}/"
    user: "{{ kibana_xpack_username }}"
    password: "{{ kibana_xpack_password }}"
    force_basic_auth: yes
    method: GET
    follow_redirects: all
  register: _result
  until: _result.status != 503
  retries: 30 # retry X times
  delay: 60 # pause for X sec b/w each call

- name: Import additional dashboards
  uri:
    url: "{{ kibana_server_protocol }}://{{ kibana_server_ip }}:{{ kibana_server_port }}/api/saved_objects/_import"
    method: POST
    return_content: yes
    user: "{{ kibana_xpack_username }}"
    password: "{{ kibana_xpack_password }}"
    force_basic_auth: yes
    body:
      file:
        content: "{{ lookup('file', item) }}"
        filename: "{{ item | basename }}"
        mime_type: application/json
    body_format: form-multipart
    headers:
      kbn-xsrf: true
  loop: "{{ kibana_extra_dashboards }}"

- name: Enable the siem signal index required for the detection framework
  uri:
    url: "{{ kibana_server_protocol }}://{{ kibana_server_ip }}:{{ kibana_server_port }}/api/detection_engine/index"
    method: POST
    status_code: [200, 409]
    user: "{{ kibana_xpack_username }}"
    password: "{{ kibana_xpack_password }}"
    force_basic_auth: yes
    headers:
      kbn-xsrf: true
      Content-Type: application/json
  register: _result
  until: _result.status == 409
  retries: 6 # retry X times
  delay: 10 # pause for X sec b/w each call
  when: kibana_security_detection_enabled|bool

- name: Load pre-packed Kibana Security detection rules
  uri:
    url: "{{ kibana_server_protocol }}://{{ kibana_server_ip }}:{{ kibana_server_port }}/api/detection_engine/rules/prepackaged"
    method: PUT
    user: "{{ kibana_xpack_username }}"
    password: "{{ kibana_xpack_password }}"
    force_basic_auth: yes
    headers:
      kbn-xsrf: true
      Content-Type: application/json
    body_format: json
    body: "{{ kibana_security_rules }}"
  register: _result
  until: _result.json == {"rules_installed":0,"rules_updated":0,"timelines_installed":0,"timelines_updated":0}
  retries: 6 # retry X times
  delay: 10 # pause for X sec b/w each call
  when: kibana_security_detection_enabled|bool

- name: Configure Kibana Security detection rules
  uri:
    url: "{{ kibana_server_protocol }}://{{ kibana_server_ip }}:{{ kibana_server_port }}/api/detection_engine/rules/_bulk_update"
    method: PATCH
    user: "{{ kibana_xpack_username }}"
    password: "{{ kibana_xpack_password }}"
    force_basic_auth: yes
    headers:
      kbn-xsrf: true
      Content-Type: application/json
    body_format: json
    body: "{{ kibana_security_rules }}"
  when: kibana_security_detection_enabled|bool and kibana_security_rules|length>0